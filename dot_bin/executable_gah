#!/bin/bash

function sync() {
    s3cmd sync s3://fale-io-logs/archived/ /home/fale/fale-io-logs/
}

function clean() {
    s3cmd rm s3://fale-io-logs/compacted/*
}

# stats_execution period_type period_name regexp
function stats_execution () {
    find ${data} -type f -name "${3}" -exec cat {} + | grep -v "/.well-known/matrix" | grep -v "/avatar-500px.png" | grep -v "index.xml" | grep -v "robots.txt" | goaccess --config-file /home/fale/.goaccessrc --ignore-crawlers --output ${data}/goaccess/0_pessimistic/${1}/${2}.html
    find ${data} -type f -name "${3}" -exec cat {} + | grep -v "/.well-known/matrix" | grep -v "/avatar-500px.png" | grep -v "index.xml" | grep -v "robots.txt" | goaccess --config-file /home/fale/.goaccessrc --output ${data}/goaccess/1_strict/${1}/${2}.html
    find ${data} -type f -name "${3}" -exec cat {} + | goaccess --config-file /home/fale/.goaccessrc --ignore-crawlers --output ${data}/goaccess/2_fair/${1}/${2}.html
    find ${data} -type f -name "${3}" -exec cat {} + | goaccess --config-file /home/fale/.goaccessrc --output ${data}/goaccess/3_real/${1}/${2}.html
    echo "Go to ${data}/goaccess/0_pessimistic/${1}/${2}.html to see the data!"
    echo "Go to ${data}/goaccess/1_strict/${1}/${2}.html to see the data!"
    echo "Go to ${data}/goaccess/2_fair/${1}/${2}.html to see the data!"
    echo "Go to ${data}/goaccess/3_real/${1}/${2}.html to see the data!"
}

# daily_stats year month day
function daily_stats () {
    stats_execution "0_daily" "${1}-${2}-${3}" "${1}-${2}-${3}.log"
}

# monthly_stats year month
function monthly_stats () {
    stats_execution "1_monthly" "${1}-${2}" "${1}-${2}-*.log"
}

# quarterly_stats year quarter
function quarterly_stats () {
    case ${2} in
        1) rgxp=${1}'-0[1-3]-*.log' ;;
        2) rgxp=${1}'-0[4-6]-*.log' ;;
        3) rgxp=${1}'-0[7-9]-*.log' ;;
        4) rgxp=${1}'-1[0-2]-*.log' ;;
    esac
    stats_execution "2_quarterly" "${1}-Q${2}" "${rgxp}"
}

# yearly_stats year
function yearly_stats () {
    stats_execution "3_yearly" "${1}" "${1}-*.log"
}

# all_time_stats
function all_time_stats () {
    stats_execution "4_all_time" "all" "*.log"
}

function all () {
    local first=$(ls -1 ${data} | grep ....-..-..\.log | head -1 | awk -F'.' '{print $1}')
    local last=$(ls -1 ${data} | grep ....-..-..\.log | tail -1 | awk -F'.' '{print $1}')

    # All time stats
    all_time_stats

    for year in $(seq $(date +%Y --date="${first}") $(date +%Y --date="${last}")); do
        # Yearly
        yearly_stats ${year}
        # Quarterly
        if [ $(date +%Y --date="${first}") -eq $(date +%Y --date="${last}") ]; then
            for quarter in $(seq $(date +%q --date="${first}") $(date +%q --date="${last}")); do
              quarterly_stats ${year} ${quarter}
            done
        elif [ $year -eq $(date +%Y --date="${first}") ]; then
            for quarter in $(seq $(date +%q --date="${first}") 4); do
              quarterly_stats ${year} ${quarter}
            done
        elif [ $year -eq $(date +%Y --date="${last}") ]; then
            for quarter in $(seq 1 $(date +%q --date="${last}")); do
              quarterly_stats ${year} ${quarter}
            done
        else
            for quarter in $(seq 1 4); do
              quarterly_stats ${year} ${quarter}
            done
        fi
        # Monthly
        if [ $(date +%Y --date="${first}") -eq $(date +%Y --date="${last}") ]; then
            for month in $(seq -f "%02g" $(date +%m --date="${first}") $(date +%m --date="${last}")); do
              monthly_stats ${year} ${month}
            done
        elif [ $year -eq $(date +%Y --date="${first}") ]; then
            for month in $(seq -f "%02g" $(date +%m --date="${first}") 12); do
              monthly_stats ${year} ${month}
            done
        elif [ $year -eq $(date +%Y --date="${last}") ]; then
            for month in $(seq -f "%02g" 1 $(date +%m --date="${last}")); do
              monthly_stats ${year} ${month}
            done
        else
            for month in $(seq -f "%02g" 1 12); do
              monthly_stats ${year} ${month}
            done
        fi
    done
}

function man () {
    echo "Usage: goaccess TIMEFRAME"
    echo "   or: goaccess sync"
    echo "   or: goaccess clean"
    echo "   or: goaccess yearly YEAR"
    echo "   or: goaccess quarterly YEAR QUARTER"
    echo "   or: goaccess monthly YEAR MONTH"
    echo "   or: goaccess daily YEAR MONTH DAY"
    echo ""
    echo "supported TIMEFRAME are: all (all logs), ats (all-time-stats), ytd (year-to-date), lcy (last-complete-year), qtd (quarter-to-date), lcq (last-complete-quarter), mtd (month-to-date), lcm (last-complete-month)"
}

data=${HOME}/fale-io-logs
for mode in 0_pessimistic 1_strict 2_fair 3_real; do
    for period in 0_daily 1_monthly 2_quarterly 3_yearly 4_all_time; do
        mkdir -p ${data}/goaccess/${mode}/${period}
    done
done


case $# in
    1) case ${1} in
           all) all ;;
           ats) all_time_stats ;;
           ytd) yearly_stats $(date +%Y) ;;
           lcy) yearly_stats $(date +%Y --date="1 year ago") ;;
           qtd) quarterly_stats $(date +%Y) $(date +%q) ;;
           lcq) quarterly_stats $(date +%Y --date="3 months ago") $(date +%q --date="3 months ago") ;;
           mtd) monthly_stats $(date +%Y) $(date +%m) ;;
           lcm) monthly_stats $(date +%Y --date="1 month ago") $(date +%m --date="1 month ago") ;;
           sync) sync ;;
           clean) clean ;;
           *) echo "no valid parameter set found!"; man; exit 1 ;;
       esac ;;
    2) case ${1} in
           "yearly") yearly_stats ${2} ;;
           *) echo "no valid parameter set found!"; man; exit 1 ;;
       esac ;;
    3) case ${1} in
           "quarterly") quarterly_stats ${2} ${3} ;;
           "monthly") monthly_stats ${2} ${3} ;;
           *) echo "no valid parameter set found!"; man; exit 1 ;;
       esac ;;
    4) daily_stats ${2} ${3} ${4} ;;
    *) echo "no valid parameter set found!"; man; exit 1 ;;
esac
